#!/usr/bin/env python3
"""
Script de test pour v√©rifier la connectivit√© SOAP
"""

import requests
import sys

def test_soap_connectivity():
    """Test de la connectivit√© SOAP"""
    print("üß™ Test de connectivit√© SOAP...")
    print("=" * 50)
    
    # Test 1: V√©rifier que le serveur r√©pond
    print("1Ô∏è‚É£ Test de connectivit√© du serveur...")
    try:
        response = requests.get("http://localhost:3000/api/health", timeout=5)
        if response.status_code == 200:
            print("‚úÖ Serveur accessible")
            print(f"   Statut: {response.json().get('status')}")
        else:
            print(f"‚ùå Serveur r√©pond avec le code {response.status_code}")
            return False
    except requests.exceptions.RequestException as e:
        print(f"‚ùå Impossible de se connecter au serveur: {e}")
        return False
    
    # Test 2: V√©rifier l'endpoint SOAP
    print("\n2Ô∏è‚É£ Test de l'endpoint SOAP...")
    try:
        # Requ√™te SOAP simple pour r√©cup√©rer le WSDL
        response = requests.get("http://localhost:3000/soap", timeout=5)
        if response.status_code == 200:
            print("‚úÖ Endpoint SOAP accessible")
            if "WSDL" in response.text or "definitions" in response.text:
                print("   WSDL d√©tect√© dans la r√©ponse")
            else:
                print("   R√©ponse re√ßue (pas de WSDL)")
        else:
            print(f"‚ùå Endpoint SOAP r√©pond avec le code {response.status_code}")
            return False
    except requests.exceptions.RequestException as e:
        print(f"‚ùå Impossible d'acc√©der √† l'endpoint SOAP: {e}")
        return False
    
    # Test 3: Test d'authentification SOAP
    print("\n3Ô∏è‚É£ Test d'authentification SOAP...")
    soap_request = """<?xml version="1.0" encoding="UTF-8"?>
<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:soap="http://newschronicle.com/soap">
   <soapenv:Header/>
   <soapenv:Body>
      <soap:authenticateUser>
         <username>admin</username>
         <password>admin123</password>
      </soap:authenticateUser>
   </soapenv:Body>
</soapenv:Envelope>"""
    
    try:
        headers = {
            'Content-Type': 'text/xml; charset=utf-8',
            'SOAPAction': 'authenticateUser'
        }
        response = requests.post("http://localhost:3000/soap", data=soap_request, headers=headers, timeout=10)
        
        if response.status_code == 200:
            print("‚úÖ Requ√™te SOAP envoy√©e avec succ√®s")
            if "success" in response.text:
                print("   R√©ponse SOAP re√ßue")
            else:
                print("   R√©ponse re√ßue (format inattendu)")
        else:
            print(f"‚ùå Requ√™te SOAP √©chou√©e avec le code {response.status_code}")
            print(f"   R√©ponse: {response.text[:200]}...")
            return False
    except requests.exceptions.RequestException as e:
        print(f"‚ùå Erreur lors de la requ√™te SOAP: {e}")
        return False
    
    print("\nüéâ Tous les tests de connectivit√© sont pass√©s !")
    print("\nüìã Prochaines √©tapes :")
    print("   1. Assurez-vous que le serveur backend est d√©marr√©")
    print("   2. G√©n√©rez un token SOAP depuis l'interface d'administration")
    print("   3. Lancez l'application Python : python soap_user_manager.py")
    
    return True

def main():
    """Fonction principale"""
    print("üöÄ Test de connectivit√© SOAP - News Chronicle Online")
    print("=" * 60)
    
    success = test_soap_connectivity()
    
    if success:
        print("\n‚úÖ L'application Python peut maintenant √™tre utilis√©e !")
        sys.exit(0)
    else:
        print("\n‚ùå Des probl√®mes de connectivit√© ont √©t√© d√©tect√©s.")
        print("   V√©rifiez que le serveur backend est d√©marr√© sur http://localhost:3000")
        sys.exit(1)

if __name__ == "__main__":
    main() 